/*
 * Copyright (c) 2024 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import Context from './application/BaseContext';

/**
 * Provides methods for graphStore create and delete.
 *
 * @namespace graphStore
 * @syscap SystemCapability.DistributedDataManager.DataIntelligence.Core
 * @since 16
 */
declare namespace graphStore {
    /**
     * Obtains a graph store.
     * You can set parameters of the graph store as required. In general, this method is recommended
     * to obtain a graph store.
     *
     * @param { Context } context - Indicates the context of application or capability.
     * @param { GraphConfig } config - Indicates the {@link GraphConfig} configuration of the database related to this graph store.
     * @returns { Promise<GraphDBStore> } The graph store {@link GraphDBStore}.
     * @throws { BusinessError } 401 - Parameter error.
     * @syscap SystemCapability.DistributedDataManager.DataIntelligence.Core
     * @since 16
     */
    function getGraphStore(context: Context, config: GraphConfig): Promise<GraphDBStore>;

    /**
     * delete the graphStore with a specified name.
     * When specify custom directory, this function should not be called.
     *
     * @param { Context } context - Indicates the context of application or capability.
     * @param { GraphConfig } config - Indicates the {@link GraphConfig} configuration of the database related to this graph store.
     * @returns { Promise<void> } The promise returned by the function.
     * @throws { BusinessError } 401 - Parameter error. The store must not be nullptr.
     * @syscap SystemCapability.DistributedDataManager.DataIntelligence.Core
     * @since 16
     */
    function deleteGraphStore(context: Context, config: GraphConfig): Promise<void>;

    /**
     * Manages graph database configurations.
     *
     * @interface GraphConfig
     * @syscap SystemCapability.DistributedDataManager.DataIntelligence.Core
     * @since 16
     */
    interface GraphConfig {
        /**
         * The database file name.
         *
         * @type { string }
         * @syscap SystemCapability.DistributedDataManager.DataIntelligence.Core
         * @since 16
         */
        name: string,

        /**
         * Specifies whether the database is encrypted.
         *
         * @type { ?boolean }
         * @syscap SystemCapability.DistributedDataManager.DataIntelligence.Core
         * @since 16
         */
        encrypt?: boolean;

    }

    /**
     * Manages base graph database store interface.
     *
     * @interface GraphDBStore
     * @syscap SystemCapability.DistributedDataManager.DataIntelligence.Core
     * @since 16
     */
    interface GraphDBStore {

        /**
         * Queries data in the database based on GQL.
         *
         * @param { string } gql - Indicates the GQL to execute.
         * @returns { Promise<ResultSet> } The {@link ResultSet} object if the operation is successful.
         * @throws { BusinessError } 401 - Parameter error.
         * @syscap SystemCapability.DistributedDataManager.DataIntelligence.Core
         * @since 16
         */
        queryGql(gql: string): Promise<ResultSet>;


        /**
         * Executes a GQL and returns a value of ValueType.
         *
         * @param { string } gql - Indicates the GQL to execute.
         * @returns { Promise<void> } The promise returned by the function.
         * @throws { BusinessError } 401 - Parameter error. Possible causes: 1. Mandatory parameters are left unspecified;
         * <br>2. Incorrect parameter types.
         * @throws { BusinessError } 801 - Capability not supported the gql.
         * @syscap SystemCapability.DistributedDataManager.DataIntelligence.Core
         * @since 16
         */
        executeGql(gql: string): Promise<void>;

        /**
         * Close the graphStore and all resultSets.
         *
         * @returns { Promise<void> } The promise returned by the function.
         * @throws { BusinessError } 401 - Parameter error. The store must not be nullptr.
         * @syscap SystemCapability.DistributedDataManager.DataIntelligence.Core
         * @since 16
         */
        close(): Promise<void>;
    }

    /**
     * Provides methods for accessing a database result set generated by querying the database.
     *
     * @enum { number }
     * @syscap SystemCapability.DistributedDataManager.DataIntelligence.Core
     * @since 16
     */
    enum ColumnType {
        /**
         * GRAPH_DB_DATATYPE_LONG: means the column type of the specified column is long.
         *
         * @syscap SystemCapability.DistributedDataManager.DataIntelligence.Core
         * @since 16
         */
        GRAPH_DB_DATATYPE_LONG = 0,
        /**
         * GRAPH_DB_DATATYPE_DOUBLE: means the column type of the specified column is double.
         *
         * @syscap SystemCapability.DistributedDataManager.DataIntelligence.Core
         * @since 16
         */
        GRAPH_DB_DATATYPE_DOUBLE,
        /**
         * GRAPH_DB_DATATYPE_STRING: means the column type of the specified column is string.
         *
         * @syscap SystemCapability.DistributedDataManager.DataIntelligence.Core
         * @since 16
         */
        GRAPH_DB_DATATYPE_STRING,
        /**
         * GRAPH_DB_DATATYPE_JSONSTR: means the column type of the specified column is string with json format.
         *
         * @syscap SystemCapability.DistributedDataManager.DataIntelligence.Core
         * @since 16
         */
        GRAPH_DB_DATATYPE_JSONSTR,
    }

    /**
     * Indicates possible value types
     *
     * @typedef { null | number | string | bigint } ValueType
     * @syscap SystemCapability.DistributedDataManager.DataIntelligence.Core
     * @since 16
     */
    type ValueType = null | number | string | bigint;

    /**
     * Provides methods for accessing a database result set generated by querying the database.
     *
     * @interface ResultSet
     * @syscap SystemCapability.DistributedDataManager.DataIntelligence.Core
     * @since 16
     */
    interface ResultSet {
        /**
         * Go to the next row of the result set.
         *
         * @returns { Promise<boolean> } True if the result set is moved successfully;
         *                      Returns false otherwise, for example, if the result set is already in the last row.
         * @syscap SystemCapability.DistributedDataManager.DataIntelligence.Core
         * @since 16
         */
        goToNext(): Promise<boolean>;

        /**
         * Obtains the value of the specified column in the current row.
         * The implementation class determines whether to throw an exception if the value of the specified column
         * in the current row is null or the specified column is not of the Assets type.
         * @param columnIndex
         * @returns { Promise<ValueType> } The column value.
         *
         * @syscap SystemCapability.DistributedDataManager.DataIntelligence.Core
         * @since 16
         */
        getValue(columnIndex: number): Promise<ValueType>;

        /**
         * Obtains the column count of the current row.
         *
         * @returns { Promise<number> } The column count of the current row.
         * @syscap SystemCapability.DistributedDataManager.DataIntelligence.Core
         * @since 16
         */
        getColumnCount(): Promise<number>;

        /**
         * Obtains the column type of the specified column in the current row.
         *
         * @param { number } idx - Indicates the specified column index, which starts from 0.
         * @returns { Promise<ColumnType> } The column type of the specified column.
         * @syscap SystemCapability.DistributedDataManager.DataIntelligence.Core
         * @since 16
         */
        getColumnType(idx: number): Promise<ColumnType>;

        /**
         * Obtains the column name based on the specified column index.
         * The column index is passed as an input parameter.
         *
         * @param { number } idx - Indicates the index of the specified column in the result set.
         * @returns { Promise<string> } The name of the specified column.
         * @syscap SystemCapability.DistributedDataManager.DataIntelligence.Core
         * @since 16
         */
        getColumnName(idx: number): Promise<string>;

        /**
         * Closes the result set.
         * Calling this method on the result set will release all of its resources and makes it ineffective.
         *
         * @returns { Promise<void> } The promise returned by the function.
         * @syscap SystemCapability.DistributedDataManager.DataIntelligence.Core
         * @since 16
         */
        close(): Promise<void>;
    }
}

export default graphStore;